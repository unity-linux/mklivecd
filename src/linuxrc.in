#!/bin/busybox ash
#
# LiveCD startup (linuxrc) script
#
# Copyright (C) 2002-2004, Jaco Greeff <jaco@puxedo.org>
# Copyright (C) 2003, Buchan Milne <bgmilne@obsidian.co.za>
# Copyright (C) 2004, Tom Kelly  <tom_kelly33@yahoo.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Adapted for mklivecd from the MiniCD (http://www.linuxminicd.org) linuxrc script
# The latest version of this script can be found at http://livecd.berlios.de


### global variables
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/live/bin:/live/sbin:/live/usr/bin:/live/usr/sbin
umask 022
DEBUG=
nocd=
nohd=
silent=
usblive=

CDROM_LIST=""
LOOPSEXT=".sqfs"
ISOTYPE="iso9660"
MEDIACHECK="isolinux/mediacheck"
DEVICES=""                # list of all ide/scsi cd-type devices
FOUNDMEM=200000           # total memory found on box
TOTALMEM=200000           # total usable memory on box
MINSIZE=2000              # Minimum size of additional ram partitions
MINLEFT=16000             # At least this much memory minus 30% should remain when home and var are full.
MAXSIZE=1000000           # maximum ramdisk size
RAMSIZE=1000000           # default ramdisk size
MINRAMSIZE=15000          # the minimum ramdisk size
KERNELVER="@KERNELVER@"   # this is setup via uname -r in the initialise section
MKLIVECDVER="@MKLIVECDVER@"
NAME_VERSION_STR="@NAME_VERSION_STR@"

#common variables 

MNTCDROM=live/cdrom
MNTLIVECD=live/loopfs
MNTRAMDISK=/ramfs
MODEXT=".ko.xz"
NEW_MODULES_PRELOAD="ata_generic pata_atiixp ata_piix ahci libahci libata pata_acpi autofs4 uas sata_nv pata_amd pata_via firewire_ohci firewire_core udf"
MODULES_PRELOAD="scsi_mod sr_mod nls_iso8859_1 nls_iso8859_2 nls_iso8859_3 nls_iso8859_4 nls_iso8859_5 nls_iso8859_6 nls_iso8859_7 nls_iso8859_9 nls_iso8859_13 nls_iso8859_14 nls_iso8859_15 nls_utf8 isofs fat vfat crc_t10dif sd_mod usbcore usb_storage uhci_hcd ohci_hcd ehci_hcd loop squashfs overlayfs $NEW_MODULES_PRELOAD --cdrom"
MAX_LOOP="max_loop=64"
### progress indicator
progress_num=0
progress_full=20
progress_max=32768

### screen colors
RES_COL=65
MOVE_TO_COL="echo -en \\033[${RES_COL}G\\033[K"
SETCOLOR_OK="echo -en \\033[1;32m"
SETCOLOR_FAIL="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

#common (library) functions

### print a success msg
printok() {
	$MOVE_TO_COL
	echo -n "[  "
	$SETCOLOR_OK
	echo -n "OK"
	$SETCOLOR_NORMAL
	echo "  ]"
	return 0
}

### print a loaded success msg
printloaded() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_OK
	echo -n "LOADED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}

### print a failure msg
printfail() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_FAIL
	echo -n "DONE"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}

### print error message and exit to limited shell
printfatal() {
	printfail
	$SETCOLOR_FAIL
	echo ""
	echo "$1"
	shift
	while [ $# -gt 0 ]; do
		echo "$1"
		shift
	done
	if [ -e /bin/plymouthd -a /bin/plymouth ]; then	
		/bin/plymouth --quit
	fi
	echo ""
	echo "       Dropping you to a limited shell."
	$SETCOLOR_NORMAL
	execshell
}

### execute a command/commands printing the success or failure msg on completion
docmd() {
	if [ -n "$DEBUG" ]; then
		echo -n "$1: "
		shift
		CMD="($1)"
		shift
		while [ $# -gt 0 ]; do
			CMD="$CMD && ($1)"
			shift
		done
		(eval "$CMD") 2>&1 >/dev/null && printok || printfail
	else
		TITLE="($1)"
		shift
		CMD="($1)"
		shift
		while [ $# -gt 0 ]; do
			CMD="$CMD && ($1)"
			shift
		done
		(eval "$CMD") 2>&1 >/dev/null
	fi 
}

dbg() {
	if [ -n "$DEBUG" ]; then
		$SETCOLOR_FAIL
		echo -e "DBG: ${@}"
		$SETCOLOR_NORMAL
	fi 
}

### load a module
loadmod() {
	MODULE="/lib/modules/$KERNELVER/kernel/$1$MODEXT"
	[ ! -f $MODULE ] && MODULE="/live$MODULE"
	[ ! -f $MODULE ] && return 1
	if [ -n "$DEBUG" ]; then
		RET=0
		echo -n "$MODULE: "
		modprobe $1 $2 && RET=0 || RET=1
		echo "($RET)"
		return $RET
	else
		(modprobe $1 $2 2>&1)>/dev/null && return 0 || return 1
	fi
}

### this is if we are to execute a limited shell
execshell() {
        if [ -e /bin/plymouthd -a /bin/plymouth ]; then
                /bin/plymouth --quit
        fi
	export HOSTNAME="localhost.localdomain"
	export PS1="$ "
	export PS2="> "
	export PS4="+ "
	echo "6" >/proc/sys/kernel/printk

	# find the best shell available to us at this point
	if [ -e /bin/bash ]; then
		echo "  Loading /bin/bash"
		export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
		SHELL="/bin/bash"
	elif [ -e /live/bin/ash ]; then
		echo "  Loading /live/bin/ash"
		export PATH=/live/bin:/live/sbin:/live/usr/bin:/live/usr/sbin
		SHELL="/live/bin/ash"
	else
		export PATH=/bin:/sbin:/usr/bin:/usr/sbin
		if [ -e /bin/ash ]; then
			echo "  Loading /bin/ash"
			SHELL="/bin/ash"
		else
			echo "  Loading /bin/busybox ash"
			SHELL="/bin/busybox ash && <dev/tty >dev/console 2>&1"
		fi
	fi
	exec $SHELL
}

mountit(){
# Usage: mountit src dst "options"
	#BUILTIN_FS="iso9660 vfat ext4 ext3 ext2 msdos reiserfs ntfs"
	#for fs in $BUILTIN_FS; do
	# afaik mount should autodetect fs type now
	#test -b $1 && mount -t $fs $3 $1 $2 >/dev/null 2>&1 && return 0
	docmd   "  Mounting  $1 to $2" \
	"test -b $1 && mount $3 $1 $2 >/dev/null 2>&1"
	#done
	#return 1
}

# ===========================================================
# discovery functions
# ===========================================================

# List all CD-ROMs
# by using /proc entries
#
list_cdrom_devices()
{
	if [ -n "$nocd" ]; then return 1; fi
	for CDDEVICE in $(cat /proc/scsi/scsi | head -n 3 | tail -n 1 | cut -d ":" -f 2); do
		cdrom_dev="/dev/$CDDEVICE"
	done
}

# List all partition devices
# take list of all partitions and output unique disks.
# Return empty result when nohd parameter was given.
#
list_partition_devices()
{
	if [ -n "$nohd" ]; then return 1; fi
	for part in $(cat /proc/partitions|tail -n+3|awk '{print $4}'); do
		part_dev="/dev/$part"
	done
}

# List all block devices
#
list_block_devices()
{
	list_cdrom_devices
	list_partition_devices
}

#--------------------------------------------------------------------#
# Linuxrc subroutines                                                #
# Display debugging info if debug is on. Allow extended echo chars.  #
#--------------------------------------------------------------------#

### initialise
initialise() {

	#Just in case
	mkdir -m 555 /proc
	mkdir -m 555 /sys
	mkdir -m 755 /run	

	busybox mount -n -t proc proc /proc
	busybox mount -n -t sysfs sysfs /sys
	busybox mount -n -t tmpfs tmpfs /run

	#Needed early on for systemd-udevd (udev)
	mkdir -m 755 /run/udev
	mkdir -m 755 /run/plymouth
	
	busybox --install 
	ln /bin/busybox /bin/awk
	ln /bin/busybox /bin/sed
	ln /bin/busybox /bin/depmod
	ln /sbin/modprobe /usr/sbin/modprobe	

	if [ -n "$DEBUG" ]; then
		echo "--- MKLIVECD LINUXRC ---------------"
	else
		clear
	fi
	rm -rf /sbin/init
	mv /sbin/init.dynamic /sbin/init

	docmd   "  Setting up kernel parameters" \
	"echo '0 0 0 0' >/proc/sys/kernel/printk" \
	"exec >/dev/console </dev/console 2>&1"

	# some kernel specifics
	KERNELVER=`uname -r`

	# parameter parsing
	for x in $(cat /proc/cmdline); do
		case $x in
			debug) DEBUG=y; ;;
			md5sum) domd5=y; ;;
			splash=silent) silent=y; ;;
			copy2ram) toram=y; ;;
			nocd) nocd=y; ;;
 			nohd) nohd=y; ;;
			fromusb) usblive=y; ;;
			livecd=*) BASEIMG="${x#livecd=}";;
			bootfromiso=*) ISO_PATH="${x#bootfromiso=}"; ;;
		esac
	done
	# this allows the option to be removed from the bootcmd
	[ -z "$BASEIMG" ] &&  BASEIMG="livecd"
}

find_cdroms() {

	#Run udevd early as it is needed by probe-modules
        if [ -n "$DEBUG" ]; then
                /bin/systemd-udevd --daemon --debug
        else
                /bin/systemd-udevd --daemon >/dev/null 2>&1
        fi

	# Try Plymouth Now after ram disk
	if [ -e /bin/plymouthd -a /bin/plymouth ]; then
	   busybox mount -t devpts -o gid=5,mode=620 /dev/pts /dev/pts
	   mknod /dev/fb c 29 0
   	   udevadm trigger --action=add --attr-match=class=0x030000 >/dev/null 2>&1
   	   udevadm trigger --action=add --subsystem-match=graphics --subsystem-match=drm --subsystem-match=tty >/dev/null 2>&1
   	   udevadm settle --timeout=30 >/dev/null 2>&1
   	   docmd "plymouth start" \
   	   "/bin/plymouthd --attach-to-session --pid-file /run/plymouth/pid" \
   	   "/bin/plymouth --show-splash"
	fi


        ## Search for cdrom devices and add them to CDROM_LIST
        ## Check for ide channels.
	for m in $MODULES_PRELOAD; do
		if [ "$m" = "loop" ]; then
			/bin/probe-modules $m $MAX_LOOP
                       if [ -n "$DEBUG" ]; then
                           echo "$m"
                       fi
		else
			/bin/probe-modules $m
                       if [ -n "$DEBUG" ]; then
                           echo "$m"
                       fi
		fi
	done

        udevadm trigger --action=add >/dev/null 2>&1
	
	sleep 2

	if [ -n "$usblive" ]; then
		rm -rf /live/sbin/halt.local
		## Check for usb stick
		for usb_device in /dev/sr[0-99] /dev/sd[a-z][0-99]; do
			if [ -e "$usb_device" ]; then
				CDROM_LIST="$CDROM_LIST $usb_device"
			fi
		done
	else	
		# List of cdroms + all the partition devices
		CDROM_LIST=`list_block_devices`

		## Check for scsi cds and partitions - if exist, add to the list 
		for scsi_cdrom in /dev/scd[0-99] /dev/sr[0-99] /dev/sd[a-z][0-99]; do
			if [ -e "$scsi_cdrom" ]; then
				CDROM_LIST="$CDROM_LIST $scsi_cdrom"
			fi
		done
                if [ -n "$DEBUG" ]; then
                   printok
                fi
	fi
}

### check the MD5 sum of the cloop iso image
checkmd5() {
	if [ -f $MNTCDROM/$MEDIACHECK ]; then
		if [ -n "$domd5" ]; then
			if [ -n "$DEBUG" ]; then
				echo -n "  Verifying MD5 checksum of iso image: "
			fi
			$MNTCDROM/$MEDIACHECK $CDDEV && printok || printfail
		fi
	fi
}


findcloop() {
        PRINTK=`cat /proc/sys/kernel/printk`
        if [ -n "$DEBUG" ]; then
                dbg "  printk is set to: $PRINTK\n"
        fi
	## Now try to find and mount the boot CD (we use ID as identification)
	if [ -n "$DEBUG" ]; then
		echo -n "  Searching for the loop image: "
	fi
	echo "0" >/proc/sys/kernel/printk
   	for i in $1; do
   		CDDEV="$i"
   		$MOVE_TO_COL
   		$SETCOLOR_OK
		if [ -n "$DEBUG" ]; then
		   	echo "$i"
		fi
		$SETCOLOR_NORMAL

		# Is the cdrom already mounted? 
		MOUNTEDCDROM=$(mount | grep "$MNTCDROM" | awk '{print $3}')
		if [[ "$MOUNTEDCDROM" != "/$MNTCDROM" ]]; then
			mountit $CDDEV $MNTCDROM
			if [ -n "$DEBUG" ]; then
				dbg "Mounted $CDDEV\n"
				docmd "show mounts" \
				"/bin/df"
			fi
			# try to find either the .sqfs loop image
			LOOPTYPE=""
			if [ -f $MNTCDROM/$BASEIMG$LOOPSEXT ]; then
				LOOPTYPE="$LOOPSEXT"
				DEVLOOP="/dev/loop0"
				LOOPMOD="squashfs"
				ISOTYPE="squashfs"
			else
				dbg "No image found at: $MNTCDROM/$BASEIMG$LOOPSEXT\n"
			fi

			# if it exists, load the correct module and mount
			if [ -n "$LOOPTYPE" ]; then
				if [ -n "$DEBUG" ]; then
					printok
				fi
				checkmd5 ""
				if [ -n "$DEBUG" ]; then
					echo -n "  Mounting loop image on /$MNTLIVECD: "
				fi
				if [ -e "$DEVLOOP" ]; then
					losetup $DEVLOOP $MNTCDROM/$BASEIMG$LOOPTYPE 
					mount -r -t $ISOTYPE $DEVLOOP $MNTLIVECD && LOOPMNT=1
				fi

				## Did we get it?
				if [ -z "$LOOPMNT" ]; then ## -z (null because mount failed)
					printfatal "ERROR: Unable to mount loop filesystem," \
					"  Commands were:" \
					"  losetup $DEVLOOP $MNTCDROM/$BASEIMG$LOOPTYPE" \
					"  mount -r -t $ISOTYPE $DEVLOOP $MNTLIVECD" \
					"  Most likely cause is bad burn or bad download" \
					"  Please run mediacheck on livecd" 
				else
					## Yes, we got it!
					# do we want copy2ram?
					toram=`grep -iq copy2ram /proc/cmdline && echo 1`
					if [ -n "$toram" ]; then
						RAMDIR="/live/livecd.ram"
						mkdir -p $RAMDIR
						# make sure we have enough room for the image
						IMAGESIZE=`ls -l $MNTCDROM/livecd.sqfs | awk '{print $5+1000000}'`
						mount -t tmpfs -o "size=$IMAGESIZE" tmpfs $RAMDIR

						if [ "$?" -eq 0 ]; then
							# copy the livecd.sqfs image to a tmpfs directory to be used as the new MNTCDROM
							echo -n 
							echo -n " Copying to memory, please stand by..."
							cp -R $MNTCDROM/livecd.sqfs $RAMDIR
							if [ "$?" -eq 0 ]; then
								printok
								# free the boot device
								umount $MNTLIVECD
								umount $MNTCDROM
                                				if [ -n "$DEBUG" ]; then
                                    				   echo "Unmounted $MNTCDROM & $MNTLIVECD"
                                 				fi
								# and use our new directory as the new MNTLIVECD
								`losetup -d $DEVLOOP 2>&1 >/dev/null`
								losetup $DEVLOOP $RAMDIR/livecd.sqfs
								mount -r -t squashfs $DEVLOOP $MNTLIVECD
								rm -rf /live/sbin/halt.local
							else
								`umount $RAMDIR 2>&1 >/dev/null`
                                                                if [ -n "$DEBUG" ]; then
                                                                   echo "Unmounted $RAMDIR"
                                                                fi
								echo -n "copy 2 ram was unsuccesfull"
								printfail
							fi
						else
							`umount $RAMDIR 2>&1 >/dev/null`
							echo -n "the iso is larger than the available ram"
							printfail
						fi
					fi
					if [ -n "$DEBUG" ]; then
						printok
					fi
					break
				fi
			fi
			`umount $MNTCDROM 2>&1 >/dev/null`
			 if [ -n "$DEBUG" ]; then
                            echo "Unmounted $MNTCDROM"
                         fi
		fi
	done
	echo "$PRINTK" >/proc/sys/kernel/printk
}

### create /live/ramfs
createramdisk() {
	# how much memory do we have?
	if [ -n "$DEBUG" ]; then
		echo -n "  Creating ramdisk -  usable memory"
	fi
	FOUNDMEM="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
	TOTALMEM="$(awk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"
	MAXSIZE="$(expr $TOTALMEM - $MINLEFT)"
	RAMSIZE="$(expr $TOTALMEM / 2)"
	[ -z "$RAMSIZE" ] && RAMSIZE=$MINRAMSIZE
	[ $RAMSIZE -lt $MINRAMSIZE ] && RAMSIZE=$MINRAMSIZE
	if [ -n "$DEBUG" ]; then
		echo -n " (${RAMSIZE}/${TOTALMEM}/${FOUNDMEM}kB)"
		printok
	fi

	# Check for sufficient memory to mount extra ramdisk for /etc, /home, /root, /var
	if test -n "$TOTALMEM" -a "$TOTALMEM" -gt "$MINLEFT"; then
		docmd   "  Creating root filesystem (${RAMSIZE}/${FOUNDMEM}kB) on /dev/shm" \
		"mkdir -p $MNTRAMDISK" \
		"mount -t tmpfs -o 'size=${RAMSIZE}k' /dev/shm $MNTRAMDISK" \
		"mkdir -p $MNTRAMDISK/live" \
		"echo '0x0100' >/proc/sys/kernel/real-root-dev" \
		"pivot_root $MNTRAMDISK $MNTRAMDISK/live" \
		"mkdir -p /proc && mount -n -t proc none /proc" \
		"mkdir -p /sys && mount -n -t sysfs none /sys" \
		"mkdir -p /tmp && chmod 1777 /tmp" \
		"mkdir -p /media && chmod 755 /media" \
		"mkdir -p -m 777 /dev && mount -n -t devtmpfs devtmpfs /dev" \
		"mkdir -p /dev/pts" \
		"cd /" \
		"ln -s /live/bin" \
		"ln -s /live/boot" \
		"ln -s /live/etc" \
		"ln -s /live/opt" \
		"ln -s /live/lib" \
		"ln -s /live/lib64" \
		"ln -s /live/usr" \
		"ln -s /live/dev" \
	   	"ln -s /live/sbin" 

		docmd   "  Making extra nodes" \
		"ln -s /proc/self/fd /dev/fd" \
		"ln -s /proc/self/fd/0 /dev/stdin" \
		"ln -s /proc/self/fd/1 /dev/stdout" \
		"ln -s /proc/self/fd/2 /dev/stderr" \
	  	"ln -s /proc/kcore /dev/core" 

	else
		printfatal "ERROR: Insufficient memory to create ramdisk."
	fi
}


### main script entry point

if [ `grep -iq debug /proc/cmdline` ]; then
	DEBUG=y
fi

initialise    ""

$SETCOLOR_NORMAL
createramdisk ""

# try to find all the cdrom and partitions
find_cdroms ""

dbg "Devices to check: $CDROM_LIST\n"

if [ "$CDROM_LIST" = "" ]; then
	printfatal "Error: No suitable media for the livecd content found." \
	"Workaround: Copy the content of the livecd from your boot device to an IDE/SATA disk," \ 
	"eg. to /mnt/hda1/livecd.sqfs or C:\\livecd.sqfs Then try to boot again."
fi

# First see if bootfrom= cheatcode is given, Try that one first

case "$ISO_PATH" in *.[iI][sS][oO]) ;; *) ISO_PATH="" ;; esac

if [ -n "$ISO_PATH" ]; then
   	dbg "ISO_PATH is set: $ISO_PATH\n"
	mkdir -p /part 
  	#try to find the iso
	for i in $CDROM_LIST; do
		CDDEV="$i"
	   	$MOVE_TO_COL
		$SETCOLOR_OK
		if [ -n "$DEBUG" ]; then
		   	echo "$i"
		fi
   		$SETCOLOR_NORMAL
   		if mountit $CDDEV $MNTCDROM ; then
   			dbg "Mounted $CDDEV\n"
   			# try to find the iso image
   			LOOP_DEV=""
   			if [ -f $MNTCDROM/$ISO_PATH ]; then
   				LOOP_DEV=$CDDEV
   				`umount $MNTCDROM 2>&1 >/dev/null`
		                 if [ -n "$DEBUG" ]; then
                   		    echo "Unmounted $MNTCDROM"
               			 fi
				break
   			fi
   			`umount $MNTCDROM 2>&1 >/dev/null`
                        if [ -n "$DEBUG" ]; then
                           echo "Unmounted $MNTCDROM"
                        fi
		else
			dbg "Could not mount $CDDEV on $MNTCDROM. The ISO_PATH is $ISO_PATH\n" 	
   		fi
   	done
   	if [ -z $LOOP_DEV ]; then
   		echo -n "couldn't find the $ISO_PATH iso image in your computer"
   		printfail
   	else
   		mount -r -o ro $LOOP_DEV /part || echo "could't mount the $LOOP_DEV partition"
   		losetup /dev/loop1 /part$ISO_PATH
   		mount -r -t udf,iso9660 /dev/loop1 $MNTCDROM && printok || printfail
   		if [ -e "$MNTCDROM/$BASEIMG$LOOPSEXT" ]; then
   			losetup /dev/loop2 $MNTCDROM/$BASEIMG$LOOPSEXT
   			mount -r -t squashfs /dev/loop2 $MNTLIVECD && LOOPMNT=1
   			rm -rf /live/sbin/halt.local
   		else
   			printfatal "couldn't find the $BASEIMG$LOOPSEXT in the $ISO_PATH" 
   		fi
   	fi
fi

dbg "I am after bootfrom. The LOOPMNT is: $LOOPMNT\n"

# no bootfrom -lets try all the mountable devices

if [ -z "$LOOPMNT" ]; then
	findcloop "$CDROM_LIST"
	dbg "I am after find_cloop The LOOPMNT is: $LOOPMNT\n"
fi

# Did we find _any_ livecd.sqfs?

if [ -z "$LOOPMNT" ]; then
	printfatal "ERROR: Unable to mount the livecd"
fi

if [ -n "$DEBUG" ]; then
	echo "--- Exiting LINUXRC ----------------"
fi

echo -e "\n"
exec /etc/rc.d/rc.sysinit <dev/console >dev/console 2>&1
exit 0
